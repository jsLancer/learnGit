
1.安装完，Git Bash
	$ git config --global user.name "jsLancer"
	$ git config --global user.email "1576243123@qq.com"
	
git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置

2.
	$ mkdir /E/code/learnGit
	$ cd /E/code/learnGit
	$ pwd							pwd命令用于显示当前目录

	$ git init 						把这个目录变成Git可以管理的仓库
									.git目录，默认是隐藏的，用ls -ah命令就可以看见。
									不一定必须在空目录下创建Git仓库，选择一个已经有东西的目录也是可以的

3.提交本地代码
	
	git add gitNote.txt
 	git commit -m "about learn git"   commit可以一次提交很多文件，所以你可以多次add不同的文件

4.
	git status  	  	查看仓库当前状态
	git diff  			查看具体修改内容

5.版本跳跃
	git log 				显示从最近到最远的提交日志
	git reflog
	$ git reset --hard HEAD^
	$ git reset --hard commitId  	 回到指定版本
	在Git中，用HEAD表示当前版本，也就是最新的提交3628164...882e1e0，上一个版本就是HEAD^，
	上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。


	HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，
	使用命令git reset --hard commit_id。

	穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

	要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。




6.管理修改
	
	git add 将工作区修改放入暂存区，git commit 将暂存区修改放入版本库
	
	cat gitNote.txt                Ctrl+D结束输入
	git diff HEAD -- gitNote.txt   可以查看工作区和版本库里面最新版本的区别

7.撤销修改

	工作区
	$ git checkout -- gitNote.txt		文件在工作区的修改全部撤销,
										就是让这个文件回到最近一次git commit或git add时的状态

	暂存区
	git reset HEAD gitNote.txt 			把暂存区的修改撤销掉（unstage），重新放回工作区


8.删除文件
	
	$ rm test.txt 						删除工作区文件
	$ git rm test.txt
	$ git commit -m "remove test.txt" 	删除版本控制区文件
	$ git checkout -- test.txt			版本库里的版本替换工作区的版本，
										无论工作区是修改还是删除，都可以“一键还原”

二，远程仓库

1.添加远程库
	git remote add origin git@github.com:jsLancer/learnGit.git 	
	把已有的本地仓库与远程仓库关联，远程库的名字就是origin


	$ git push -u origin master 	把本地库的所有内容推送到远程库上
	由于远程库是空的，第一次推送master分支时，加上了-u参数，
	Git不但会把本地的master分支内容推送的远程新的master分支，
	还会把本地的master分支和远程的master分支关联起来，
	在以后的推送或者拉取时就可以简化命令。

	$ git push origin master 		把本地master分支的最新修改推送至GitHub


2.从远程库克隆
	
	$ git clone git@github.com:jsLancer/learnGit.git



三，分支管理
	

	$ git checkout -b dev
	git checkout命令加上-b参数表示创建并切换
	$ git branch dev
	$ git checkout dev

	git branch命令会列出所有分支，当前分支前面会标一个*号。

	$ git checkout master

	$ git merge dev


	查看分支：git branch

	创建分支：git branch <name>

	切换分支：git checkout <name>

	创建+切换分支：git checkout -b <name>

	合并某分支到当前分支：git merge <name>
	当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

	删除分支：git branch -d <name>

	$ git merge --no-ff -m "merge with no-ff" dev